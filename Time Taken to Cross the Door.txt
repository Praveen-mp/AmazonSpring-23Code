class Solution {
    public int[] timeTaken(int[] arrival, int[] state) {
          Queue<Integer> enter = new LinkedList<>();
          Queue<Integer> exit = new LinkedList<>();
          int []lastState={-1,1,0};
          for(int i=0;i<state.length;i++){
              if(state[i]==0) enter.offer(i);
              else exit.offer(i);
          }
          int time=0;
          int []re=new int[state.length];
          int preState=0;
          while(!enter.isEmpty() || !exit.isEmpty()){
              int timeToEnter=enter.isEmpty()?Integer.MAX_VALUE:arrival[enter.peek()];
              int timeToExit = exit.isEmpty()?Integer.MAX_VALUE:arrival[exit.peek()];
              if(timeToEnter<=time && timeToExit<=time){
                  if(preState==-1){
                      int idx=enter.poll();
                      re[idx]=time;
                  }else{
                      int idx=exit.poll();
                      re[idx]=time;
                      preState=1;
                  }
              }else if(timeToEnter<=time){
                  int idx=enter.poll();
                  re[idx]=time;
                  preState=-1;
              }else if(timeToExit<=time){
                  int idx=exit.poll();
                  re[idx]=time;
                  preState=1;
              }else{
                  preState=0;
                  time=Math.min(timeToEnter,timeToExit)-1;
              }
              time++;
          }
          return re;
    }
}