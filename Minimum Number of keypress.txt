You have a keypad with 9 buttons, numbered from 1 to 9, each mapped to lowercase English letters. You can choose which characters each button is matched to as long as:

All 26 lowercase English letters are mapped to.
Each character is mapped to by exactly 1 button.
Each button maps to at most 3 characters.
To type the first character matched to a button, you press the button once. To type the second character, you press the button twice, and so on.

Given a string s, return the minimum number of keypresses needed to type s using your keypad.

Note that the characters mapped to by each button, and the order they are mapped in cannot be changed.
Input: s = "apple"
Output: 5
Explanation: One optimal way to setup your keypad is shown above.
Type 'a' by pressing button 1 once.
Type 'p' by pressing button 6 once.
Type 'p' by pressing button 6 once.
Type 'l' by pressing button 5 once.
Type 'e' by pressing button 3 once.
A total of 5 button presses are needed, so return 5.

Code:
class Solution {
    public int minimumKeypresses(String str) {
            Integer[] freq = new Integer[26];
            Arrays.fill(freq, 0);
            for(int i = 0; i < str.length(); i++)
                freq[str.charAt(i) - 'a']++;
            Arrays.sort(freq, (x, y) -> y - x);
            for(int i=0;i<26;i++){
                System.out.print(freq[i]+" ");
            }
            int result = 0;
            for(int i = 0 ;i < 26; i++)
                result += freq[i] * ((i + 9)/9);
            return result;
    }
}